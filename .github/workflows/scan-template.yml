name: Scan Channel Template

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      channel:
        description: "Channel name to scan"
        required: true
        type: string
      data_dir:
        description: "Directory name for storing data (lowercase)"
        required: true
        type: string
      reset_manifest:
        description: "Reset manifest and start fresh (ignores previous artifacts)"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  scan-channel:
    runs-on: ubuntu-latest
    environment: ColtonGranger

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run terrorscan for ${{ inputs.channel }}
        run: |
          python terrorscan.py deep-scan -c ${{ inputs.channel }} -d 3 -m 99 -mc 99 -o results
        continue-on-error: true
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_PHONE: ${{ secrets.TELEGRAM_PHONE }}
          TELEGRAM_SESSION_STRING: ${{ secrets.TELEGRAM_SESSION_STRING }}

      - name: Download previous complete site artifact
        run: |
          # Check if we should reset and start fresh
          if [ "${{ inputs.reset_manifest }}" = "true" ]; then
            echo "Reset manifest flag is set - starting completely fresh"
            mkdir -p pages_output/public/data
            echo '{"channels": {}, "lastUpdated": null}' > existing_manifest.json
            exit 0
          fi

          # Try to get the most recent complete-site artifact from ANY workflow
          echo "Looking for previous complete site artifact across all workflows..."

          # Get all recent runs from all workflows in the repository
          gh run list --repo ${{ github.repository }} --limit 50 --json databaseId,status,conclusion,createdAt,workflowName \
            --jq '.[] | select(.status == "completed" and .conclusion == "success") | [.databaseId, .workflowName, .createdAt] | @tsv' \
            | sort -k3 -r > recent_runs.tsv

          FOUND_ARTIFACT=false

          while IFS=$'\t' read -r run_id workflow_name created_at && [ "$FOUND_ARTIFACT" = false ]; do
            echo "Checking run $run_id ($workflow_name, $created_at) for complete-site artifact..."

            # Check if this run has a complete-site artifact
            if gh run view "$run_id" --repo ${{ github.repository }} --json artifacts --jq '.artifacts[].name' | grep -q '^complete-site$'; then
              echo "Found complete-site artifact in run $run_id from workflow: $workflow_name"

              # Try to download the artifact
              if gh run download "$run_id" --repo ${{ github.repository }} --name "complete-site" --dir ./previous_site/; then
                echo "Successfully downloaded complete-site artifact"
                FOUND_ARTIFACT=true
                break
              else
                echo "Failed to download artifact from run $run_id, trying next..."
              fi
            fi
          done < recent_runs.tsv

          if [ "$FOUND_ARTIFACT" = true ]; then
            echo "Previous site downloaded successfully"
            # Extract the previous site
            if [ -f "previous_site/site.tar.gz" ]; then
              tar -xzf previous_site/site.tar.gz
              echo "Previous site extracted - $(find pages_output -type f | wc -l) files restored"
            else
              echo "Previous site archive not found, starting fresh"
              mkdir -p pages_output/public/data
            fi
          else
            echo "No previous complete-site artifact found, starting fresh"
            mkdir -p pages_output/public/data
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Add new scan data to complete site
        run: |
          # Check if scan produced any results
          if [ ! -d "results" ] || [ -z "$(ls -A results 2>/dev/null)" ]; then
            echo "No scan results found for ${{ inputs.channel }}"
            exit 0
          fi

          # Add the NEW scan data to the existing complete site
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          DAY=$(date +%d)
          TIMESTAMP=$(date +%H%M%S)
          TIMESTAMPED_DIR="pages_output/public/data/${{ inputs.data_dir }}/${YEAR}/${MONTH}/${DAY}/${TIMESTAMP}"

          # Add new scan results to the complete site
          mkdir -p "${TIMESTAMPED_DIR}"
          cp -r results/* "${TIMESTAMPED_DIR}/"

          echo "New scan results added to complete site at ${TIMESTAMPED_DIR}"

          # Download existing manifest if we don't have one from the artifact (unless resetting)
          if [ "${{ inputs.reset_manifest }}" = "true" ]; then
            echo "Reset flag is set - using empty manifest"
            echo '{"channels": {}, "lastUpdated": null}' > existing_manifest.json
          elif [ ! -f "pages_output/public/data/manifest.json" ]; then
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/public/data/manifest.json" \
              -o existing_manifest.json || {
              echo '{"channels": {}, "lastUpdated": null}' > existing_manifest.json
            }
          else
            cp pages_output/public/data/manifest.json existing_manifest.json
            echo "Using manifest from previous site artifact"
          fi

          # Run the manifest update script
          python3 update_manifest.py \
            --data-dir "${{ inputs.data_dir }}" \
            --channel "${{ inputs.channel }}" \
            --year "${YEAR}" \
            --month "${MONTH}" \
            --day "${DAY}" \
            --timestamp "${TIMESTAMP}" \
            --repo-owner "${{ github.repository_owner }}" \
            --repo-name "${{ github.event.repository.name }}"

      - name: Set up Node.js for UI build
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: network-viz/package-lock.json

      - name: Build and include UI
        run: |
          # Build the visualization
          cd network-viz
          npm ci
          npm run build

          # Copy UI build to root of pages output (so it's accessible at the domain root)
          cp -r dist/* ../pages_output/

          echo "UI built and included in deployment"

      - name: Create and upload complete site artifact
        run: |
          # Create a compressed archive of the complete site
          tar -czf site.tar.gz pages_output/
          echo "Complete site archived for future builds"

      - name: Upload complete site artifact
        uses: actions/upload-artifact@v4
        with:
          name: complete-site
          path: site.tar.gz
          retention-days: 30

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./pages_output"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
